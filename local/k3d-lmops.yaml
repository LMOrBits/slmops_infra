apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: slmops-cluster

servers: 1 # 1 master node
agents: 2 # 2 worker nodes

# kubeAPI: # same as `--api-port myhost.my.domain:6445` (where the name would resolve to 127.0.0.1)
#   host: "slmops.localhost" # important for the `server` setting in the kubeconfig
#   hostIP: "127.0.0.1" # where the Kubernetes API will be listening on
#   hostPort: "6445" # where the Kubernetes API listening port will be mapped to on your host system

# subnet: "172.28.0.0/16" # same as `--subnet 172.28.0.0/16`
ports:
  - port: 80:80 # same as `--port '8080:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: 1234:1234 # same as `--port '8080:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
# volumes:
#   - volume: ./volume:/volume # same as `--volume 'volume:/volume'`
#     nodeFilters:
#       - server:0
#       - agent:*
# registries: # define how registries should be created or used
#   create: # creates a default registry to be used with the cluster; same as `--registry-create registry.localhost`
#     name: registry.localhost
#     host: "0.0.0.0"
#     hostPort: "5000"
options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    loadbalancer:
      configOverrides:
        - settings.workerConnections=2048
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  # runtime: # runtime (docker) specific options
  #   gpuRequest: all # same as `--gpus all`
