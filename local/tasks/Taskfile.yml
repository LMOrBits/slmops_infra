version: "3"

desc: Development environment management tasks

vars:
  HELM_OPTIONS: ""

tasks:
  # Cluster Management
  cluster-create:
    desc: Create k3d cluster using the config file and install essential components
    cmds:
    - k3d cluster create --config k3d-lmops.yaml
    - task: install-ingress
    - task: install-zenml

  cluster-delete:
    desc: Delete the k3d cluster
    cmds:
    - k3d cluster delete slmops-cluster

  cluster-start:
    desc: Start the stopped cluster
    cmds:
    - k3d cluster start slmops-cluster

  cluster-stop:
    desc: Stop the running cluster
    cmds:
    - k3d cluster stop slmops-cluster

  cluster-test:
    desc: Create a test cluster
    cmds:
    - k3d cluster create --config k3d-test.yaml

  # GPU Support
  gpu-cluster:
    desc: Install NVIDIA GPU operator
    cmds:
    - helm repo add nvidia https://helm.ngc.nvidia.com/nvidia
    - helm repo update
    - |
      helm install gpu-operator -n gpu-operator --create-namespace \
      nvidia/gpu-operator {{.HELM_OPTIONS}} \
      --set 'toolkit.env[0].name=CONTAINERD_CONFIG' \
      --set 'toolkit.env[0].value=/var/lib/rancher/k3s/agent/etc/containerd/config.toml' \
      --set 'toolkit.env[1].name=CONTAINERD_SOCKET' \
      --set 'toolkit.env[1].value=/run/k3s/containerd/containerd.sock' \
      --set 'toolkit.env[2].name=CONTAINERD_RUNTIME_CLASS' \
      --set 'toolkit.env[2].value=nvidia'

  # Ingress Management
  install-ingress:
    desc: Install nginx ingress controller
    cmds:
    - helm repo add nginx-stable https://helm.nginx.com/stable || true
    - helm repo update
    - |
      helm install nginx-ingress nginx-stable/nginx-ingress \
      --namespace ingress-nginx --create-namespace \
      --set rbac.create=true \
      --set controller.service.type=LoadBalancer \
      --set controller.service.loadBalancerIP=172.18.0.240

  # Component Installation
  install-dremio:
    desc: Install Dremio using Helm
    cmds:
    - helm install dremio ./manifests/dremio --values ./manifests/dremio.yaml

  install-zenml:
    desc: Install or upgrade ZenML server
    cmds:
    - helm upgrade --install zenml-server ./manifests/zenml --values ./manifests/zenml.yml --create-namespace --namespace zenml

  install-nessie:
    desc: Install Project Nessie
    cmds:
    - helm repo add nessie-helm https://charts.projectnessie.org
    - helm repo update
    - helm install -n nessie-ns nessie nessie-helm/nessie --create-namespace

  install-mlflow:
    desc: Install or upgrade MLflow server
    cmds:
    - helm upgrade --install mlflow-server ./manifests/mlflow --values ./manifests/mlflow.yml

  # Port Forwarding
  zenml-port-forward:
    desc: Forward ZenML server port to localhost
    cmds:
    - kubectl port-forward -n zenml svc/zenml-server 8080:8080

  mlflow-port-forward:
    desc: Forward MLflow server port to localhost
    cmds:
    - kubectl port-forward svc/mlflow-server-tracking 5000:5000

  # KubeRay Management
  install-kuberay:
    desc: Install KubeRay operator
    cmds:
    - helm upgrade --install kuberay-operator ./manifests/ray/kuberay-operator --values ./manifests/ray/ray-values.yaml --create-namespace --namespace kuberay-operator

  install-kuberay-cluster:
    desc: Install Ray cluster
    cmds:
    - helm install raycluster kuberay/ray-cluster --version 1.2.2 --set 'image.tag=2.9.0-aarch64' --namespace kuberay-operator

  install-kuberay-job:
    desc: Install Ray job sample
    cmds:
    - kubectl apply -f https://raw.githubusercontent.com/ray-project/kuberay/v1.2.2/ray-operator/config/samples/ray-job.sample.yaml --namespace kuberay-operator

  install-kuberay-service:
    desc: Install Ray service
    cmds:
    - kubectl apply -f https://raw.githubusercontent.com/ray-project/kuberay/v1.2.2/ray-operator/config/samples/ray-service.sample.yaml --namespace kuberay-operator

  # Status Checks
  cluster-status:
    desc: Check overall cluster status
    cmds:
    - k3d cluster list
    - echo "\nKubernetes Nodes:"
    - kubectl get nodes
    - echo "\nKubernetes Pods:"
    - kubectl get pods -A
    - task: check-mlflow
    - task: check-zenml
    - task: check-ingress

  check-mlflow:
    desc: Check MLflow deployment status
    cmds:
    - echo "\nMLflow Pods:"
    - kubectl get pods | grep mlflow
    - echo "\nMLflow Services:"
    - kubectl get svc | grep mlflow
    - echo "\nMLflow Ingress:"
    - kubectl get ingress | grep mlflow

  check-zenml:
    desc: Check ZenML deployment status
    cmds:
    - echo "\nZenML Pods:"
    - kubectl get pods | grep zenml
    - echo "\nZenML Services:"
    - kubectl get svc | grep zenml
    - echo "\nZenML Ingress:"
    - kubectl get ingress | grep zenml

  check-ingress:
    desc: Check ingress status
    cmds:
    - echo "\nIngress Controller Status:"
    - kubectl get pods -n ingress-nginx
    - echo "\nIngress Services:"
    - kubectl get svc -n ingress-nginx

  # Utilities
  debug:
    desc: Create a debug pod for troubleshooting
    cmds:
    - kubectl run -it --rm debug-pod --image=busybox --restart=Never --namespace=zenml -- sh || kubectl exec -it debug-pod -n zenml -- sh

  gcloud-auth:
    desc: Configure Google Cloud authentication
    cmds:
    - |
      kubectl create secret docker-registry artifact-registry-secret \
      --docker-server=https://europe-north1-docker.pkg.dev \
      --docker-username=oauth2accesstoken \
      --docker-password="$(gcloud auth print-access-token)" \
      --docker-email=super-admin-dev@slmops-dev.iam.gserviceaccount.com

  add-gcs-secret:
    desc: Add Google Cloud Storage credentials
    cmds:
    - kubectl create secret generic gcs-credentials --from-file=credentials.json=../cloud/terraform/environments/dev/keys/super-admin-key.json
